#!/usr/bin/python3
# -*- coding: utf-8 -*-

import datetime
#import hashlib
import json
import os
import pprint
#import random
import re
import requests
import flask
import flask_basicauth
import flask_cors
import time
#import urllib.parse
import uvicorn

from flask import Flask, render_template, redirect, url_for, request, Response, flash
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from asgiref.wsgi import WsgiToAsgi


###########################################################
# Enable Logging Information
###########################################################
trace = False
trace = True
status = 0

###########################################################
# Generated by SmartThings.exe
###########################################################
OAuthAppId        = 'f6ede605-3241-4bfc-ba65-f498a7205bd9'
OAuthClientId     = '9e2f754c-ebb5-4d6d-8cbb-630d730a8813'
OAuthClientSecret = 'fe3f2fe3-2690-4b1e-aa8b-7d68f3220b10'

############################################################
# Global Variables
############################################################
RedirectUri = 'https://joi.mysmax.store/callback'
AuthUrl = 'https://api.smartthings.com/oauth/authorize'
TokenUrl = 'https://api.smartthings.com/oauth/token'
DeviceUrl = 'https://api.smartthings.com/v1/devices'
HomeUrl = 'https://joi.mysmax.store/'
SmartAppConfirmUrl = ''
DeviceID = '233fb748-86e7-49f4-89f6-00b74f6e635a'


LoginID = 'MySmaX' + '-' + '0001'

OAuthCode = ''
OAuthState = ''
OAuthTokenType = ''
OAuthAccessToken = ''
OAuthRefreshToken = ''
OAuthInstalledAppId = ''
OAuthExpiresIn = ''
OAuthScope = ''
OAuthAccessTier = ''
MyDevices = ''

CommandDeviceID = ''
CommandComponent = ''
CommandCapability = ''
CommandCommand = ''
CommandArguments = ''


################################################
# Micro Web Server based on sanic and uvicorn
################################################
app = flask.Flask(__name__)
limiter = Limiter(
    get_remote_address,
    app=app,
    default_limits=["15 per minute"],
    storage_uri="memory://"
)

#############################
# CORS
#############################
flask_cors.CORS(app)

#############################
# Auth
#############################
app.config['BASIC_AUTH_USERNAME'] = 'MySmaX'
app.config['BASIC_AUTH_PASSWORD'] = 'MySmaXUser'
basic_auth = flask_basicauth.BasicAuth(app)

'''
def hash_password(salt, password):
    salted = password + salt
    return hashlib.sha512(salted.encode("utf8")).hexdigest()

app_salt = "APP_SECRET - don't do this in production"
users = {
    "MySmaX": hash_password(app_salt, "MySmaXUser"),
}

def verify_password(username, password):
    if username in users:
        return users.get(username) == hash_password(app_salt, password)
    return False
'''

#############################
# STATIC
#############################
STATIC_FOLDER = os.path.join(os.path.dirname(__file__), './static')

################################
# Allowed white IP lists
################################
WhiteIpList = [
    '1.230.67.0/24',
    '49.50.172.0/24',
    '52.78.131.0/24',
    '59.6.128.0/24',
    '59.6.136.0/24',
    '118.67.131.0/24',      # chirp3
    '121.141.123.0/24', 
    '147.46.219.0/24',      # SNU
    '175.196.0.0/24',
    '210.94.9.0/24',
    '211.47.75.0/24',   
    '211.231.103.0/24',
    '218.38.42.0/24',       # Life-SKT
]

##########################################
# 등록한 IP 주소만 허용함
##########################################
def PermitIpAddress(v4addr):
    from ipaddress import IPv4Network, IPv4Address
    for IPv4 in WhiteIpList:
        if IPv4Address(v4addr) in IPv4Network(IPv4):
            return True
    return False

##########################################
#
##########################################
@app.route('/images/<fileName>/')
def return_image_file_87asdfu(request, fileName):
    return flask.response.file(os.path.join(STATIC_FOLDER, 'images', fileName))

########################################################################
# SmartApp WebHook
########################################################################
def MakeAppData():

    ############################################################
    # Global Variables
    ############################################################
    global SmartAppConfirmUrl
    global OAuthAppId
    global OAuthClientId
    global OAuthClientSecret
    global OAuthCode
    global OAuthState
    global OAuthTokenType
    global OAuthAccessToken
    global OAuthRefreshToken
    global OAuthInstalledAppId
    global OAuthExpiresIn
    global OAuthScope
    global OAuthAccessTier
    global MyDevices

    global CommandDeviceID
    global CommandComponent
    global CommandCapability
    global CommandCommand
    global CommandArguments


    if CommandArguments:
        print('CommandArguments:', type(CommandArguments), CommandArguments)
        tmpArguments = json.dumps(CommandArguments)
        print('tmpArguments:', type(tmpArguments), tmpArguments)
    else:
        tmpArguments = ''

    return {
        #'SmartAppConfirmUrl': SmartAppConfirmUrl,

        'SmartAppData': {
            'Smart App Id': OAuthAppId,
            'Client Id': OAuthClientId,
            'Client Secret': OAuthClientSecret,
            },

        'OAuthData': {
            'Authorization State': OAuthState,
            'Authorization Code': OAuthCode,
            'Access Token': OAuthAccessToken,
            'Token Type': OAuthTokenType,
            'Refresh Token': OAuthRefreshToken,
            'Installed App Id': OAuthInstalledAppId,
            'Expires In': OAuthExpiresIn,
            'Scope': OAuthScope,
            'Access Tier': OAuthAccessTier,
            },

        'DeviceData': {
            'MyDevices': MyDevices,
            },

        'CommandData': {
            "DeviceID": CommandDeviceID,
            "Component": CommandComponent,
            "Capability": CommandCapability,
            "Command": CommandCommand,
            "Arguments": tmpArguments
            #"Arguments": json.dumps(CommandArguments),
            },
    }


@app.route('/', methods=['GET'])
@limiter.limit("15/minute")
#@basic_auth.required
def webHookSmartThingsRootGet():

    if trace:
        print()
        print('='*20, datetime.datetime.now(), '='*20)
        print('request:', request)
        print('request from:', request.remote_addr)
        #print('request method:', request.method)

    #from flask_limiter.util import get_remote_address

    appData = MakeAppData()
    return render_template('JoiSmartApp.html', Data=appData)


############################################################
# For App Register on the SmartThings Developer Workspace
############################################################
@app.route('/', methods=['POST'])
def webHookSmartThingsRootPost():

    global SmartAppConfirmUrl

    if trace:
        print('=' * 20, datetime.datetime.now(), '=' * 20)
        #print('From IP Address:', request.ip)
        print('request:', request)
        print('request from:', request.remote_addr)
        #print('request method:', request.method)
        print('request data:', request.data)

    queryDict = json.loads(request.data)
    if 'lifecycle' not in queryDict:
        if 'confirmationData' in queryDict:
            confirmationData = queryDict['confirmationData']
            url = confirmationData['confirmationUrl']

            appData = MakeAppData()
            return render_template('JoiSmartApp.html', Data=appData)

        else:
            appData = MakeAppData()
            return render_template('JoiSmartApp.html', Data=appData)

    else:
        if trace:
            print('lifecycle', '->', queryDict['lifecycle'])

    if 'confirmationData' in queryDict:
        confirmationData = queryDict['confirmationData']
    else:
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    if queryDict['lifecycle'] in ['CONFIRMATION']:

        targetUrl = confirmationData['confirmationUrl']
        response = requests.get(targetUrl)

        if response.status_code == 200:
            data = response.json()
            SmartAppConfirmUrl = targetUrl
            if trace:
                print('-> ConfirmationUrl:', SmartAppConfirmUrl)
                print('<- response.json:', data)
        else:
             print(f"Error: {response.status_code}")
        response.close()

        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    elif queryDict['lifecycle'] in ['CONFIGURATION']:

        pprint.pprint(queryDict['configurationData'])
        pprint.pprint(queryDict['configurationData']['phase'])

        configurationData = {}
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    elif queryDict['lifecycle'] in ['INSTALL']:

        pprint.pprint(queryDict['installData'])
        pprint.pprint(queryDict['installData']['authToken'])
        pprint.pprint(queryDict['installData']['refreshToken'])

        installData = {
            'installData': {}
        }
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    elif queryDict['lifecycle'] in ['UPDATE']:

        pprint.pprint(queryDict['updateData'])
        pprint.pprint(queryDict['updateData']['authToken'])
        pprint.pprint(queryDict['updateData']['refreshToken'])

        updateData = {
            'updateData': {}
        }
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    elif queryDict['lifecycle'] in ['EVENT']:

        pprint.pprint(queryDict['eventData'])
        pprint.pprint(queryDict['eventData']['authToken'])

        eventData = {
            'eventData': {}
        }
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    elif queryDict['lifecycle'] in ['OAUTH_CALLBACK']:

        pprint.pprint(queryDict['oAuthCallbackData'])
        pprint.pprint(queryDict['oAuthCallbackData']['urlPath'])
        #pprint.pprint(queryDict['eventData']['refreshToken'])

        oAuthCallbackData = {
            'oAuthCallbackData': {}
        }
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    elif queryDict['lifecycle'] in ['UNINSTALL']:

        pprint.pprint(queryDict['uninstallData'])

        uninstallData = {
            'uninstallData': {}
        }
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    ##############
    # deprecated
    ##############
    elif queryDict['lifecycle'] in ['PING']:    

        pingData = {
            'pingData': queryDict['pingData']
        }
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)
        return sanic.response.json(pingData, status=200)

    else:
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    ########################################################
    # Send Confirmation GET reqeust to the confirmationUrl
    ########################################################
    if trace:
        print('Send Confirmation GET request...')
        print(confirmationData['confirmationUrl'])

    appData = MakeAppData()
    return render_template('JoiSmartApp.html', Data=appData)


@app.route('/callback', methods=['GET'])
def webHookSmartThingsGetCallback():

    global OAuthCode
    global OAuthState
    global OAuthAccessToken
    global OAuthRefreshToken
    global OAuthTokenType
    global OAuthInstalledAppId
    global OAuthExpiresIn

    if trace:
        print()
        print('='*20, datetime.datetime.now(), '='*20)
        print('request:', request)
        print('request from:', request.remote_addr)
        print('request.args:', request.args)


    OAuthCode = request.args.get('code', '')
    OAuthState = request.args.get('state', '')
    if OAuthCode:
        if trace:
            print('OAuthState:', OAuthState)
            print('OAuthCode:', OAuthCode)

    appData = MakeAppData()
    return render_template('JoiSmartApp.html', Data=appData)


###################################################
# RequestAuthCode: 
# Redirect to api.smartthings.com to get auth code
###################################################
@app.route('/RequestAuthCode', methods=['GET'])
def webHookSmartThingsReqeustAuthCode():

    if trace:
        print()
        print('='*20, datetime.datetime.now(), '='*20)
        print('request:', request)
        print('request from:', request.remote_addr)
        #print('request method:', request.method)

    if OAuthClientId:
        authUrl = f"{AuthUrl}" + "?" + \
            f"client_id={OAuthClientId}" + "&" + \
            f"redirect_uri={RedirectUri}" + "&" + \
            f"response_type=code" + "&" + \
            f"state={OAuthClientId}-{LoginID}" + "&" + \
            f"scope=r:devices:* x:devices:*"
        if trace:
            print('Redirect to Get OAuthCode ->', authUrl)
        return redirect(authUrl)


    else:
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)


@app.route('/ClearTokens', methods=['GET'])
def webHookSmartThingsClearTokens():

    global OAuthCode
    global OAuthAccessToken
    global OAuthRefreshToken
    global OAuthTokenType
    global OAuthInstalledAppId
    global OAuthExpiresIn
    global MyDevices
    global OAuthScope
    global OAuthAccessTier


    if trace:
        print()
        print('='*20, datetime.datetime.now(), '='*20)
        print('request:', request)
        print('request from:', request.remote_addr)

    OAuthCode = ''
    OAuthAccessToken = ''
    OAuthRefreshToken = ''
    OAuthTokenType = ''
    OAuthInstalledAppId = ''
    OAuthExpiresIn = ''
    OAuthTokenType = ''
    MyDevices = ''
    OAuthScope = ''
    OAuthAccessTier = ''

    appData = MakeAppData()
    return render_template('JoiSmartApp.html', Data=appData)


@app.route('/RequestTokens', methods=['GET'])
def webHookSmartThingsReqeustTokens():

    global OAuthCode
    global OAuthAccessToken
    global OAuthRefreshToken
    global OAuthTokenType
    global OAuthInstalledAppId
    global OAuthExpiresIn
    global OAuthScope
    global OAuthAccessTier

    if trace:
        print()
        print('='*20, datetime.datetime.now(), '='*20)
        print('request:', request)
        print('request from:', request.remote_addr)
        #print('request method:', request.method)

    if OAuthCode:

        ###################################
        # Call Request Tokens
        ###################################
        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
        data = {
            "grant_type": "authorization_code",
            "client_id": OAuthClientId,
            "code": OAuthCode,
            "redirect_uri": RedirectUri,
            #"state": UserID,
        }

        if trace:
            print('Request Tokens =>', TokenUrl)
            print(headers)
            print(data)
            print(OAuthClientId)
            print(OAuthClientSecret)

        r = requests.post(url=TokenUrl, headers=headers, data=data, auth=(OAuthClientId, OAuthClientSecret))
        tokenDict = r.json()

        if trace:
            print(r)
            print(tokenDict)

        if r.status_code == 200:
            OAuthAccessToken = tokenDict['access_token']
            OAuthRefreshToken = tokenDict['refresh_token']
            OAuthInstalledAppId = tokenDict['installed_app_id']
            OAuthExpiresIn = tokenDict['expires_in']
            OAuthTokenType = tokenDict['token_type']
            OAuthScope = tokenDict['scope']
            OAuthAccessTier = tokenDict['access_tier']

        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    else:
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)


@app.route('/RefreshTokens', methods=['GET'])
def webHookSmartThingsRefreshTokens():

    global OAuthCode
    global OAuthAccessToken
    global OAuthRefreshToken
    global OAuthInstalledAppId
    global OAuthExpiresIn
    global OAuthTokenType

    if trace:
        print()
        print('='*20, datetime.datetime.now(), '='*20)
        #print('request method:', request.method)
        print('request:', request)
        print('request from:', request.remote_addr)

    if OAuthAccessToken and OAuthRefreshToken:

        ###################################
        # Call Request Tokens
        ###################################
        headers = {
            "Content-Type": "application/x-www-form-urlencoded"
        }
        data = {
            "grant_type": "refresh_token",
            "client_id": OAuthClientId,
            "refresh_token": OAuthRefreshToken,
            #"state": UserID,
        }

        if trace:
            print('Refresh Tokens:', TokenUrl)
            print(headers)
            print(data)
            print(OAuthClientId)
            print(OAuthClientSecret)

        r = requests.post(url=TokenUrl, headers=headers, data=data, auth=(OAuthClientId, OAuthClientSecret))

        if trace:
            print(r)
            tokenDict = r.json()
            print(tokenDict)

        if r.status_code == 200:
            OAuthAccessToken = tokenDict['access_token']
            OAuthRefreshToken = tokenDict['refresh_token']
            OAuthInstalledAppId = tokenDict['installed_app_id']
            OAuthExpiresIn = tokenDict['expires_in']
            OAuthTokenType = tokenDict['token_type']
            OAuthScope = tokenDict['scope']
            OAuthAccessTier = tokenDict['access_tier']
            OAuthCode = ''

        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)

    else:
        appData = MakeAppData()
        return render_template('JoiSmartApp.html', Data=appData)


###########################
# GetDevices 
###########################
@app.route('/GetDevices', methods=['GET'])
def webHookSmartThingsGetDevices():

    global OAuthCode
    global OAuthAccessToken
    global OAuthRefreshToken
    global OAuthTokenType
    global OAuthInstalledAppId
    global OAuthExpiresIn
    global MyDevices

    if trace:
        print()
        print('='*20, datetime.datetime.now(), '='*20)
        print('request:', request)
        print('request from:', request.remote_addr)
        #print('request method:', request.method)

    if OAuthAccessToken:

        ###################################
        # Call Request Tokens
        ###################################
        headers = {
            'Authorization': f'Bearer {OAuthAccessToken}',
            'Content-Type': 'application/json'
        }
        if trace:
            print('Get Devices =>', DeviceUrl)
            print(headers)

        r = requests.get(url=DeviceUrl, headers=headers)

        if trace:
            print(r)

        if r.status_code == 200:
            myDevices = r.json()
            print('_links:', len(myDevices['_links']))
            print('# of Devices: ', len(myDevices['items']))
            #pprint.pprint(myDevices)

            MyDevices = {}
            for item in myDevices['items']:
                print(item)
                #MyDevices[item['label']] = item
                MyDevices[item['deviceId']] = item

        else:
            MyDevices = {}
            print(f'Error: {r.status_code} - {r.text}')

    appData = MakeAppData()
    return render_template('JoiSmartApp.html', Data=appData)

    #else:
        #appData = MakeAppData()
        #return render_template('JoiSmartApp.html', Data=appData)


###########################
# DeviceCommand
###########################
@app.route('/DeviceCommand', methods=['GET'])
def webHookSmartThingsDeviceCommand():

    global OAuthCode
    global OAuthAccessToken
    global OAuthRefreshToken
    global OAuthTokenType
    global OAuthInstalledAppId
    global OAuthExpiresIn
    global DeviceID

    global CommandDeviceID
    global CommandComponent
    global CommandCapability
    global CommandCommand
    global CommandArguments

    global status

    if trace:
        print()
        print('='*20, datetime.datetime.now(), '='*20)
        print('request:', request)
        print('request from:', request.remote_addr)
        #print('request method:', request.method)

    CommandDeviceID = request.args.get('DeviceID', '')
    CommandComponent = request.args.get('Component', '')
    CommandCapability = request.args.get('Capability', '')
    CommandCommand = request.args.get('Command', '')
    tmpArguments = request.args.get('Arguments', '')

    if not CommandDeviceID:
        CommandDeviceID = DeviceID
    if not CommandComponent:
        CommandComponent = "main"
    if not CommandCapability:
        CommandCapability = "switch"
    if not CommandCommand:
        CommandCommand = "on"
    if tmpArguments:
        CommandArguments = [ json.loads(tmpArguments) ]
    else:
        CommandArguments = []

    '''
    #if trace:
        #print(CommandDeviceID)
        #print(CommandComponent)
        #print(CommandCapability)
        #print(CommandCommand)
        #print(CommandArguments)
    '''
    
    if OAuthAccessToken:

        ###################################
        # Call Request Tokens
        ###################################
        headers = {
            'Authorization': f'Bearer {OAuthAccessToken}',
            'Content-Type': 'application/json'
        }
        data = {
            "commands": [
                {
                    "component": CommandComponent,
                    "capability": CommandCapability,
                    "command": CommandCommand,
                    "arguments": CommandArguments,
                }
            ]
        }

        #DeviceID = '233fb748-86e7-49f4-89f6-00b74f6e635a'

        if trace:
            print('Device Command =>', DeviceUrl)
            print(headers)
            print(data)

        CmdUrl = f"{DeviceUrl}/{CommandDeviceID}/commands"
        r = requests.post(url=CmdUrl, headers=headers, json=data)

        if trace:
            print(r)

        if r.status_code == 200:
            print(f'OK: {r.status_code} - {r.text}')
        else:
            print(f'NG: {r.status_code} - {r.text}')

    appData = MakeAppData()
    return render_template('JoiSmartApp.html', Data=appData)



###########################
# main()
###########################
if __name__ == '__main__':


    PORT = 80
    PORT = 443

    print()
    print('=' * 60)
    print(f"JOI SmartApp Server is up and running on port {PORT}")
    print('=' * 60)
    print()

    #
    # 1. uvicorn
    #

    certFile = "/etc/letsencrypt/live/mysmax.store/fullchain.pem"
    keyFile  = "/etc/letsencrypt/live/mysmax.store/privkey.pem"

    #certFile = "/etc/certs/mysmax.store/fullchain.pem"
    #keyFile  = "/etc/certs/mysmax.store/privkey.pem"

    # log_level : #'critical', 'error', 'warning', 'info', 'debug', 'trace'. Default: 'info'.
    asgi_app = WsgiToAsgi(app)
    #uvicorn.run(asgi_app, host="0.0.0.0", port=PORT, access_log=True, log_level='error')
    uvicorn.run(asgi_app, host="0.0.0.0", port=PORT, access_log=True, log_level='error', ssl_keyfile=keyFile, ssl_certfile=certFile)
